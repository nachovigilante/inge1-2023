

----STARTUP---- (10 June 2023 20:30:18) as C:\Users\nacho\Documents\GitHub\SmallTalkImage\CuisUniversity-5832.image!


----SNAPSHOT----(10 June 2023 20:31:25) CuisUniversity-5832.image priorSource: 10103553!

----STARTUP---- (25 June 2023 15:38:49) as C:\Users\nacho\Documents\GitHub\SmallTalkImage\CuisUniversity-5832.image!


!classRemoval: #MockMerchantProcessorStolenCard stamp: 'IV 6/25/2023 15:38:52'!
MockMerchantProcessor subclass: #MockMerchantProcessorStolenCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MockMerchantProcessorOK stamp: 'IV 6/25/2023 15:38:52'!
MockMerchantProcessor subclass: #MockMerchantProcessorOK
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MockMerchantProcessorInsufficientFunds stamp: 'IV 6/25/2023 15:38:53'!
MockMerchantProcessor subclass: #MockMerchantProcessorInsufficientFunds
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MockMerchantProcessor stamp: 'IV 6/25/2023 15:38:53'!
Object subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'IV 6/25/2023 15:38:53'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expiration securityCode owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'IV 6/25/2023 15:38:53'!
Object subclass: #Cashier
	instanceVariableNames: 'mp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'IV 6/25/2023 15:38:53'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'IV 6/25/2023 15:38:53'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'IV 6/25/2023 15:38:53'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\nacho\Documents\GitHub\inge1-2023\10-CustomerImporter\iteracion 1\CustomerImporter.st----!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 15:40:24'!
ERROR!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 15:40:24'!
ERROR!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 15:41:33'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 15:41:34'!
PASSED!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 15:41:41'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 15:41:43'!
PASSED!

Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'IV 6/25/2023 15:49:58'!
Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #CustomerImporter stamp: 'IV 6/25/2023 15:50:26'!
Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

----SNAPSHOT----(25 June 2023 15:50:31) CuisUniversity-5832.image priorSource: 10103762!

Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'IV 6/25/2023 15:51:43'!
Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'no messages' stamp: 'IV 6/25/2023 15:51:51'!
importCustomers

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData session |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 15:52:23' prior: 50647823!
importCustomers

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData session |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
	^ line.! !
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 15:52:43' prior: 50647508!
importCustomers

	! !
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 15:53:01' prior: 50647894!
importCustomers

	CustomerImporter new importCustomers.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 15:54:14' prior: 50647859!
importCustomers

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData session |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 15:54:19'!
ERROR!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 15:54:19'!
ERROR!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 15:54:34'!
ERROR!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 15:54:34'!
ERROR!
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 15:55:02' prior: 50647898!
importCustomers

	CustomerImporter new importCustomersInto: session.! !
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 15:56:15'!
importCustomers: aDataBaseSession

	CustomerImporter new importCustomersInto: session.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 15:56:15'!
importCustomers: aDataBaseSession

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData session |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 15:56:15' prior: 50647483!
test01ImportCustomerHasCorrectNumberOfCustomers

	self importCustomers: DataBaseSession new.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 15:56:15' prior: 50647490!
test02EachCustomerHasCorrectInformation

	| firstCustomer secondCustomer |
	self importCustomers: DataBaseSession new.
	
	firstCustomer := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
	secondCustomer := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
	
	self assert: 'Pepe' equals: firstCustomer firstName.
	self assert: 'Sanchez' equals: firstCustomer lastName.
	
	self assert: 'Juan' equals: secondCustomer firstName.
	self assert: 'Perez' equals: secondCustomer lastName.! !

!methodRemoval: ImportTest #importCustomers stamp: 'IV 6/25/2023 15:56:15'!
importCustomers

	CustomerImporter new importCustomersInto: session.!

!methodRemoval: CustomerImporter #importCustomers stamp: 'IV 6/25/2023 15:56:15'!
importCustomers

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData session |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
!
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 15:56:23'!
importCustomersInto: aDataBaseSession

	CustomerImporter new importCustomersInto: session.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 15:56:24'!
importCustomersInto: aDataBaseSession

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData session |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 15:56:24' prior: 50647999!
test01ImportCustomerHasCorrectNumberOfCustomers

	self importCustomersInto: DataBaseSession new.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 15:56:24' prior: 50648008!
test02EachCustomerHasCorrectInformation

	| firstCustomer secondCustomer |
	self importCustomersInto: DataBaseSession new.
	
	firstCustomer := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
	secondCustomer := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
	
	self assert: 'Pepe' equals: firstCustomer firstName.
	self assert: 'Sanchez' equals: firstCustomer lastName.
	
	self assert: 'Juan' equals: secondCustomer firstName.
	self assert: 'Perez' equals: secondCustomer lastName.! !

!methodRemoval: ImportTest #importCustomers: stamp: 'IV 6/25/2023 15:56:24'!
importCustomers: aDataBaseSession

	CustomerImporter new importCustomersInto: session.!

!methodRemoval: CustomerImporter #importCustomers: stamp: 'IV 6/25/2023 15:56:24'!
importCustomers: aDataBaseSession

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData session |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
!
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 15:56:35'!
importCustomers

	CustomerImporter new importCustomersInto: session.! !

!methodRemoval: ImportTest #importCustomersInto: stamp: 'IV 6/25/2023 15:56:37'!
importCustomersInto: aDataBaseSession

	CustomerImporter new importCustomersInto: session.!
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 15:56:50' prior: 50648116!
test02EachCustomerHasCorrectInformation

	| firstCustomer secondCustomer |
	self importCustomers.
	
	firstCustomer := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
	secondCustomer := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
	
	self assert: 'Pepe' equals: firstCustomer firstName.
	self assert: 'Sanchez' equals: firstCustomer lastName.
	
	self assert: 'Juan' equals: secondCustomer firstName.
	self assert: 'Perez' equals: secondCustomer lastName.! !
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 15:56:53' prior: 50648107!
test01ImportCustomerHasCorrectNumberOfCustomers

	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 15:56:58'!
ERROR!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 15:56:58'!
ERROR!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 15:57:14' prior: 50648071!
importCustomersInto: aDataBaseSession

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			aDataBaseSession persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 15:57:19'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 15:57:20'!
PASSED!

!classDefinition: 'CustomerImporter class' category: 'CustomerImporter' stamp: 'IV 6/25/2023 15:58:20'!
CustomerImporter class
	instanceVariableNames: 'session'!
!CustomerImporter class methodsFor: 'no messages' stamp: 'IV 6/25/2023 15:58:16'!
into: aDataBaseSession

	session := aDataBaseSession.! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'IV 6/25/2023 15:58:58' prior: 50648267!
into: aDataBaseSession

	^self new importInto: aDataBaseSession.! !
!CustomerImporter methodsFor: 'nil' stamp: 'IV 6/25/2023 15:59:20'!
importInto: aDataBaseSession

	| session |
	session := aDataBaseSession.! !

CustomerImporter class
	instanceVariableNames: ''!

!classDefinition: 'CustomerImporter class' category: 'CustomerImporter' stamp: 'IV 6/25/2023 15:59:41'!
CustomerImporter class
	instanceVariableNames: ''!

Object subclass: #CustomerImporter
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #CustomerImporter
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 15:59:55' prior: 50648278!
importInto: aDataBaseSession

	| sessiona |
	sessiona := aDataBaseSession.! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'IV 6/25/2023 16:00:03'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:00:07' prior: 50648300!
importInto: aDataBaseSession

	session := aDataBaseSession.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:00:54'!
initializeInto: aDataBaseSession

	session := aDataBaseSession.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:00:54' prior: 50648273!
into: aDataBaseSession

	^self new initializeInto: aDataBaseSession.! !

!methodRemoval: CustomerImporter #importInto: stamp: 'IV 6/25/2023 16:00:54'!
importInto: aDataBaseSession

	session := aDataBaseSession.!
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 16:01:36' prior: 50648175!
importCustomers

	CustomerImporter into: session.! !
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 16:01:39' prior: 50648339!
importCustomers

	CustomerImporter into: session.
	! !
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 16:01:45' prior: 50648344!
importCustomers

	| importer |
	importer := CustomerImporter into: session.
	! !
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 16:01:56' prior: 50648349!
importCustomers

	| importer |
	
	importer := CustomerImporter into: session.
	
	importer value.
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IV 6/25/2023 16:02:40' prior: 50648219!
importCustomersInto: aDataBaseSession

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IV 6/25/2023 16:02:44'!
importCustomersInto

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !

!methodRemoval: CustomerImporter #importCustomersInto: stamp: 'IV 6/25/2023 16:02:45'!
importCustomersInto: aDataBaseSession

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IV 6/25/2023 16:02:51' overrides: 16902254!
value

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !

!methodRemoval: CustomerImporter #importCustomersInto stamp: 'IV 6/25/2023 16:02:51'!
importCustomersInto

	| inputStream  newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:02:59'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 16:03:00'!
PASSED!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:05:15' prior: 50648468 overrides: 16902254!
value

	|   newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'IV 6/25/2023 16:05:15'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IV 6/25/2023 16:05:18' prior: 50648545 overrides: 16902254!
value

	| newCustomer line |
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IV 6/25/2023 16:05:20' prior: 50648588 overrides: 16902254!
value

	| newCustomer line |
	
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IV 6/25/2023 16:05:44' prior: 50648623 overrides: 16902254!
value

	| newCustomer line |


	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IV 6/25/2023 16:05:45' prior: 50648658 overrides: 16902254!
value

	| newCustomer line |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close
! !
!CustomerImporter methodsFor: 'initialization' stamp: 'IV 6/25/2023 16:05:49' prior: 50648323!
initializeInto: aDataBaseSession

	session := aDataBaseSession.
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:05:52'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 16:05:53'!
PASSED!
!CustomerImporter methodsFor: 'initialization' stamp: 'IV 6/25/2023 16:06:23'!
from: aStream initializeInto: aDataBaseSession

	session := aDataBaseSession.
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:06:23' prior: 50648329!
into: aDataBaseSession

	^self new from: (UniFileStream new open: 'input.txt' forWrite: false) initializeInto: aDataBaseSession.! !

!methodRemoval: CustomerImporter #initializeInto: stamp: 'IV 6/25/2023 16:06:23'!
initializeInto: aDataBaseSession

	session := aDataBaseSession.
	inputStream := UniFileStream new open: 'input.txt' forWrite: false.!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:06:23' prior: 50648737!
from: aStream initializeInto: aDataBaseSession

	session := aDataBaseSession.
	inputStream := aStream.! !
!CustomerImporter methodsFor: 'initialization' stamp: 'IV 6/25/2023 16:06:36'!
initializeFrom: aStream into: aDataBaseSession

	session := aDataBaseSession.
	inputStream := aStream.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:06:37' prior: 50648745!
into: aDataBaseSession

	^self new initializeFrom: (UniFileStream new open: 'input.txt' forWrite: false) into: aDataBaseSession.! !

!methodRemoval: CustomerImporter #from:initializeInto: stamp: 'IV 6/25/2023 16:06:37'!
from: aStream initializeInto: aDataBaseSession

	session := aDataBaseSession.
	inputStream := aStream.!
!CustomerImporter class methodsFor: 'instance creation' stamp: 'IV 6/25/2023 16:07:11'!
from: aStream into: aDataBaseSession

	^self new initializeFrom: (UniFileStream new open: 'input.txt' forWrite: false) into: aDataBaseSession.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:07:11' prior: 50648355!
importCustomers

	| importer |
	
	importer := CustomerImporter from: (UniFileStream new open: 'input.txt' forWrite: false) into: session.
	
	importer value.
	! !

!methodRemoval: CustomerImporter class #into: stamp: 'IV 6/25/2023 16:07:11'!
into: aDataBaseSession

	^self new initializeFrom: (UniFileStream new open: 'input.txt' forWrite: false) into: aDataBaseSession.!
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:07:11' prior: 50648786!
from: aStream into: aDataBaseSession

	^self new initializeFrom: aStream into: aDataBaseSession.! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'IV 6/25/2023 16:07:35' prior: 50648809!
from: aReadableStream into: aDataBaseSession

	^self new initializeFrom: aReadableStream into: aDataBaseSession.! !
!CustomerImporter methodsFor: 'initialization' stamp: 'IV 6/25/2023 16:07:52' prior: 50648766!
initializeFrom: anInputStream into: aDataBaseSession

	session := aDataBaseSession.
	inputStream := anInputStream.! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'IV 6/25/2023 16:08:04' prior: 50648816!
from: anInputStream into: aDataBaseSession

	^self new initializeFrom: anInputStream into: aDataBaseSession.! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:08:24'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 16:08:25'!
PASSED!
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 16:09:57'!
importCustomersFromFile

	| importer |
	
	importer := CustomerImporter from: (UniFileStream new open: 'input.txt' forWrite: false) into: session.
	
	importer value.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:09:57' prior: 50648186!
test02EachCustomerHasCorrectInformation

	| firstCustomer secondCustomer |
	self importCustomersFromFile.
	
	firstCustomer := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
	secondCustomer := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
	
	self assert: 'Pepe' equals: firstCustomer firstName.
	self assert: 'Sanchez' equals: firstCustomer lastName.
	
	self assert: 'Juan' equals: secondCustomer firstName.
	self assert: 'Perez' equals: secondCustomer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:09:57' prior: 50648204!
test01ImportCustomerHasCorrectNumberOfCustomers

	self importCustomersFromFile.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.! !

!methodRemoval: ImportTest #importCustomers stamp: 'IV 6/25/2023 16:09:57'!
importCustomers

	| importer |
	
	importer := CustomerImporter from: (UniFileStream new open: 'input.txt' forWrite: false) into: session.
	
	importer value.
	!
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 16:10:08'!
importCustomersFromReadStream

	| importer |
	
	importer := CustomerImporter from: (UniFileStream new open: 'input.txt' forWrite: false) into: session.
	
	importer value.
	! !
!ImportTest methodsFor: 'nil' stamp: 'IV 6/25/2023 16:10:57'!
dataStream

	^ReadStream on: 
		'C,Pepe,Sanchez,D,22333444
		A,San Martin,3322,Olivos,1636,BsAs
		A,Maipu,888,Florida,1122,Buenos Aires
		C,Juan,Perez,C,23-25666777-9
		A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 16:11:21' prior: 50648886!
importCustomersFromReadStream

	| importer |
	
	importer := CustomerImporter from: self dataStream into: session.
	
	importer value.
	! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:11:26'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 16:11:27'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 16:11:40' prior: 50648871!
test01ImportCustomerHasCorrectNumberOfCustomers

	self importCustomersFromReadStream .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:11:41'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 16:11:45' prior: 50648917!
test01ImportCustomerHasCorrectNumberOfCustomers

	self importCustomersFromReadStream.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:11:47'!
FAILURE!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:11:52'!
FAILURE!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:11:53'!
FAILURE!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:14:04'!
FAILURE!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:14:04'!
FAILURE!

newCustomer!
!ImportTest methodsFor: 'data' stamp: 'IV 6/25/2023 16:17:04' prior: 50648894!
dataStream

	^ReadStream on: 
		'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'data' stamp: 'IV 6/25/2023 16:17:07' prior: 50648954!
dataStream

	^ReadStream on: 
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:17:15'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 16:17:15'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 16:19:25' prior: 50648852!
test02EachCustomerHasCorrectInformation

	| firstCustomer secondCustomer |
	self importCustomersFromReadStream .
	
	firstCustomer := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
	secondCustomer := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
	
	self assert: 'Pepe' equals: firstCustomer firstName.
	self assert: 'Sanchez' equals: firstCustomer lastName.
	
	self assert: 'Juan' equals: secondCustomer firstName.
	self assert: 'Perez' equals: secondCustomer lastName.! !
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 16:19:26' prior: 50648979!
test02EachCustomerHasCorrectInformation

	| firstCustomer secondCustomer |
	self importCustomersFromReadStream.
	
	firstCustomer := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
	secondCustomer := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
	
	self assert: 'Pepe' equals: firstCustomer firstName.
	self assert: 'Sanchez' equals: firstCustomer lastName.
	
	self assert: 'Juan' equals: secondCustomer firstName.
	self assert: 'Perez' equals: secondCustomer lastName.! !

!methodRemoval: ImportTest #importCustomersFromFile stamp: 'IV 6/25/2023 16:19:30'!
importCustomersFromFile

	| importer |
	
	importer := CustomerImporter from: (UniFileStream new open: 'input.txt' forWrite: false) into: session.
	
	importer value.
	!
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 16:19:40'!
importCustomer

	| importer |
	
	importer := CustomerImporter from: self dataStream into: session.
	
	importer value.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:19:40' prior: 50648997!
test02EachCustomerHasCorrectInformation

	| firstCustomer secondCustomer |
	self importCustomer.
	
	firstCustomer := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
	secondCustomer := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
	
	self assert: 'Pepe' equals: firstCustomer firstName.
	self assert: 'Sanchez' equals: firstCustomer lastName.
	
	self assert: 'Juan' equals: secondCustomer firstName.
	self assert: 'Perez' equals: secondCustomer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 16:19:40' prior: 50648928!
test01ImportCustomerHasCorrectNumberOfCustomers

	self importCustomer.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.! !

!methodRemoval: ImportTest #importCustomersFromReadStream stamp: 'IV 6/25/2023 16:19:40'!
importCustomersFromReadStream

	| importer |
	
	importer := CustomerImporter from: self dataStream into: session.
	
	importer value.
	!
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 16:20:09' prior: 50649023!
importCustomer
	(CustomerImporter from: self dataStream into: session) value.
	

	! !
!ImportTest methodsFor: 'importing' stamp: 'IV 6/25/2023 16:20:12' prior: 50649063!
importCustomer
	(CustomerImporter from: self dataStream into: session) value.! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:20:15'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 16:20:16'!
PASSED!

----SNAPSHOT----(25 June 2023 16:20:25) CuisUniversity-5832.image priorSource: 10117027!

!methodRemoval: ImportTest #importCustomer stamp: 'IV 6/25/2023 16:20:43'!
importCustomer
	(CustomerImporter from: self dataStream into: session) value.!
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 16:20:44' prior: 50649030!
test02EachCustomerHasCorrectInformation

	| firstCustomer secondCustomer |
	(CustomerImporter from: self dataStream into: session) value.
	
	firstCustomer := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
	secondCustomer := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
	
	self assert: 'Pepe' equals: firstCustomer firstName.
	self assert: 'Sanchez' equals: firstCustomer lastName.
	
	self assert: 'Juan' equals: secondCustomer firstName.
	self assert: 'Perez' equals: secondCustomer lastName.! !
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 16:20:44' prior: 50649048!
test01ImportCustomerHasCorrectNumberOfCustomers

	(CustomerImporter from: self dataStream into: session) value.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.! !
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 16:20:55' prior: 50649089!
test02EachCustomerHasCorrectInformation

	| firstCustomer secondCustomer |
	
	(CustomerImporter from: self dataStream into: session) value.
	
	firstCustomer := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
	secondCustomer := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
	
	self assert: 'Pepe' equals: firstCustomer firstName.
	self assert: 'Sanchez' equals: firstCustomer lastName.
	
	self assert: 'Juan' equals: secondCustomer firstName.
	self assert: 'Perez' equals: secondCustomer lastName.! !

----SNAPSHOT----(25 June 2023 16:22:21) CuisUniversity-5832.image priorSource: 10157768!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 16:22:23'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 16:22:24'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 17:11:15'!
test03EachCustomerHasItsAddresses

    | customerA firstAddressOfCustomerA secondAddressOfCustomerA customerB addressOfCustomerB |
    self importCustomers.
    
    customerA := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
    customerB := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
    firstAddressOfCustomerA := Address street: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
    secondAddressOfCustomerA := Address street: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
    addressOfCustomerB := Address street: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.

    self assert: 2 equals: customerA numberOfAddresses.
    self assert: (customerA hasAddress: firstAddressOfCustomerA).
    self assert: (customerA hasAddress: secondAddressOfCustomerA).
    
    self assert: 1 equals: customerB numberOfAddresses.
    self assert: (customerB hasAddress: addressOfCustomerB)! !
!Address methodsFor: 'province' stamp: 'IV 6/25/2023 17:13:08' overrides: 16901772!
= anObject

    ^ (anObject isKindOf: (self class))
        and: [ streetName = anObject streetName and: streetNumber = anObject streetNumber ]
        and: [ town = anObject town ]
        and: [ zipCode = anObject zipCode ]
        and: [ province = anObject province ]! !
!Address methodsFor: 'comparing' stamp: 'IV 6/25/2023 17:13:26' overrides: 16901788!
hash

    ^ streetName hash + streetNumber hash + town hash + zipCode hash + province hash! !
!Address methodsFor: 'initialization' stamp: 'IV 6/25/2023 17:13:50'!
initializeStreet: aStreetName number: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName 

    streetName := aStreetName.
    streetNumber := aStreetNumber.
    town := aTownName.
    zipCode := aZipCode.
    province := aProvinceName.! !
!Address methodsFor: 'initialization' stamp: 'IV 6/25/2023 17:14:00'!
initializeAt: aStreetName number: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName 

    streetName := aStreetName.
    streetNumber := aStreetNumber.
    town := aTownName.
    zipCode := aZipCode.
    province := aProvinceName.! !

!methodRemoval: Address #initializeStreet:number:town:zipCode:province: stamp: 'IV 6/25/2023 17:14:00'!
initializeStreet: aStreetName number: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName 

    streetName := aStreetName.
    streetNumber := aStreetNumber.
    town := aTownName.
    zipCode := aZipCode.
    province := aProvinceName.!
!Address class methodsFor: 'no messages' stamp: 'IV 6/25/2023 17:14:28'!
street: aStreetName number: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName 
    ^self new initializeStreet: aStreetName number: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName! !
!Address class methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 17:14:36'!
at: aStreetName number: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName 
    ^self new initializeStreet: aStreetName number: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 17:14:36' prior: 50649145!
test03EachCustomerHasItsAddresses

    | customerA firstAddressOfCustomerA secondAddressOfCustomerA customerB addressOfCustomerB |
    self importCustomers.
    
    customerA := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
    customerB := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
    firstAddressOfCustomerA := Address at: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
    secondAddressOfCustomerA := Address at: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
    addressOfCustomerB := Address at: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.

    self assert: 2 equals: customerA numberOfAddresses.
    self assert: (customerA hasAddress: firstAddressOfCustomerA).
    self assert: (customerA hasAddress: secondAddressOfCustomerA).
    
    self assert: 1 equals: customerB numberOfAddresses.
    self assert: (customerB hasAddress: addressOfCustomerB)! !

!methodRemoval: Address class #street:number:town:zipCode:province: stamp: 'IV 6/25/2023 17:14:36'!
street: aStreetName number: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName 
    ^self new initializeStreet: aStreetName number: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName!
!Address class methodsFor: 'as yet unclassified' stamp: 'IV 6/25/2023 17:14:47' prior: 50649240!
at: aStreetName number: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName 
    ^self new initializeAt: aStreetName number: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName! !
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 17:15:19'!
importCustomers

	^ (CustomerImporter from: self dataStream into: session) value! !
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 17:15:19' prior: 50649117!
test02EachCustomerHasCorrectInformation

	| firstCustomer secondCustomer |
	
	self importCustomers.
	
	firstCustomer := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
	secondCustomer := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
	
	self assert: 'Pepe' equals: firstCustomer firstName.
	self assert: 'Sanchez' equals: firstCustomer lastName.
	
	self assert: 'Juan' equals: secondCustomer firstName.
	self assert: 'Perez' equals: secondCustomer lastName.! !
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 17:15:19' prior: 50649108!
test01ImportCustomerHasCorrectNumberOfCustomers

	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.! !
!ImportTest methodsFor: 'tests' stamp: 'IV 6/25/2023 17:15:25' prior: 50649309!
test02EachCustomerHasCorrectInformation

	| firstCustomer secondCustomer |	
	self importCustomers.
	
	firstCustomer := self findCustomerIdentifiedBy: '22333444' ofType: 'D'.
	secondCustomer := self findCustomerIdentifiedBy: '23-25666777-9' ofType: 'C'.
	
	self assert: 'Pepe' equals: firstCustomer firstName.
	self assert: 'Sanchez' equals: firstCustomer lastName.
	
	self assert: 'Juan' equals: secondCustomer firstName.
	self assert: 'Perez' equals: secondCustomer lastName.! !
!Customer methodsFor: 'addresses' stamp: 'IV 6/25/2023 17:15:41'!
hasAddress: anAddress

    ^ addresses includes: anAddress! !
!Customer methodsFor: 'addresses' stamp: 'IV 6/25/2023 17:15:49'!
numberOfAddresses

    ^ addresses size! !
!Customer methodsFor: 'identification' stamp: 'IV 6/25/2023 17:15:59'!
hasIdOfType: anIdentificationType withNumber: anIdentificationNumber
    ^ identificationType = anIdentificationType and: [identificationNumber = anIdentificationNumber].! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 17:16:13'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 17:16:14'!
PASSED!

!testRun: #ImportTest #test03EachCustomerHasItsAddresses stamp: 'IV 6/25/2023 17:16:14'!
FAILURE!

!testRun: #ImportTest #test03EachCustomerHasItsAddresses stamp: 'IV 6/25/2023 17:16:15'!
FAILURE!

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 17:16:19'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 17:16:21'!
PASSED!

!testRun: #ImportTest #test03EachCustomerHasItsAddresses stamp: 'IV 6/25/2023 17:16:23'!
FAILURE!

!testRun: #ImportTest #test03EachCustomerHasItsAddresses stamp: 'IV 6/25/2023 17:16:24'!
FAILURE!

!testRun: #ImportTest #test03EachCustomerHasItsAddresses stamp: 'IV 6/25/2023 17:17:41'!
FAILURE!

!testRun: #ImportTest #test03EachCustomerHasItsAddresses stamp: 'IV 6/25/2023 17:18:32'!
FAILURE!

!testRun: #ImportTest #test03EachCustomerHasItsAddresses stamp: 'IV 6/25/2023 17:18:33'!
FAILURE!

!testRun: #ImportTest #test03EachCustomerHasItsAddresses stamp: 'IV 6/25/2023 17:18:44'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IV 6/25/2023 17:21:07' prior: 50648691 overrides: 16902254!
value

	| newCustomer line |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close
! !

!testRun: #ImportTest #test01ImportCustomerHasCorrectNumberOfCustomers stamp: 'IV 6/25/2023 17:21:15'!
PASSED!

!testRun: #ImportTest #test02EachCustomerHasCorrectInformation stamp: 'IV 6/25/2023 17:21:16'!
PASSED!

!testRun: #ImportTest #test03EachCustomerHasItsAddresses stamp: 'IV 6/25/2023 17:21:17'!
PASSED!

----SNAPSHOT----(25 June 2023 17:23:46) CuisUniversity-5832.image priorSource: 10159528!