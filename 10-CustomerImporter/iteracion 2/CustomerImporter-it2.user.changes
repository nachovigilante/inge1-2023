

----STARTUP---- (26 June 2023 19:00:47) as /home/jt/files/cuis-university/images/CustomerImporter-it2.image!


----End fileIn of /home/jt/source/ingsoft1-ejercicios/10-CustomerImporter/Step1/CustomerImporter-35.st----!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:06:34' prior: 50624731 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new;
			firstName: customerData second;
			lastName: customerData third;
			identificationType: customerData fourth ;
			identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:06:48'!
newCustomerFrom: customerData

	^ Customer new;
			firstName: customerData second;
			lastName: customerData third;
			identificationType: customerData fourth ;
			identificationNumber: customerData fifth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:06:48' prior: 50624883 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:07:41' prior: 50624914!
newCustomerFrom: customerData

	^ Customer firstName: customerData second
			lastName: customerData third
			identificationType: customerData fourth
			identificationNumber: customerData fifth! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:07:55'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:07:55'!
ERROR!
!Customer class methodsFor: 'instance creation' stamp: 'JT 6/26/2023 19:08:00'!
firstName: aString lastName: aString2 identificationType: aString3 identificationNumber: aString4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFirstName: aString lastName: aString2 identificationType: aString3 identificationNumber: aString4 ! !
!Customer class methodsFor: 'instance creation' stamp: 'JT 6/26/2023 19:08:03' prior: 50624965!
firstName: aString lastName: aString2 identificationType: aString3 identificationNumber: aString4 
	^self new initializeFirstName: aString lastName: aString2 identificationType: aString3 identificationNumber: aString4 ! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:08:05'!
ERROR!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'JT 6/26/2023 19:08:11'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses string'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'JT 6/26/2023 19:08:11'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses string string2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'JT 6/26/2023 19:08:11'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses string string2 string3'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'JT 6/26/2023 19:08:11'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses string string2 string3 string4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'initialization' stamp: 'JT 6/26/2023 19:08:11'!
initializeFirstName: aString lastName: aString2 identificationType: aString3 identificationNumber: aString4 
	self shouldBeImplemented.
	string := aString.
	string2 := aString2.
	string3 := aString3.
	string4 := aString4.! !
!Customer methodsFor: 'initialization' stamp: 'JT 6/26/2023 19:08:31' prior: 50625029!
initializeFirstName: aFirstName lastName: aString2 identificationType: aString3 identificationNumber: aString4 
	self shouldBeImplemented.
	string := aFirstName.
	string2 := aString2.
	string3 := aString3.
	string4 := aString4.! !
!Customer methodsFor: 'initialization' stamp: 'JT 6/26/2023 19:08:44' prior: 50625039!
initializeFirstName: aFirstName lastName: aLastName identificationType: aString3 identificationNumber: aString4 
	self shouldBeImplemented.
	firstName := aFirstName.
	string2 := aLastName.
	string3 := aString3.
	string4 := aString4.! !
!Customer methodsFor: 'initialization' stamp: 'JT 6/26/2023 19:09:07' prior: 50625049!
initializeFirstName: aFirstName lastName: aLastName identificationType: aString3 identificationNumber: aString4 
	self shouldBeImplemented.
	firstName := aFirstName.
	lastName := aLastName.
	string3 := aString3.
	string4 := aString4.! !
!Customer methodsFor: 'initialization' stamp: 'JT 6/26/2023 19:09:36' prior: 50625060!
initializeFirstName: aFirstName lastName: aLastName identificationType: anIdType identificationNumber: anIdNumber 
	firstName := aFirstName.
	lastName := aLastName.
	identificationType := anIdType.
	identificationNumber := anIdNumber.! !
!Customer methodsFor: 'initialization' stamp: 'JT 6/26/2023 19:09:37' prior: 50625071!
initializeFirstName: aFirstName lastName: aLastName identificationType: anIdType identificationNumber: anIdNumber 
	firstName := aFirstName.
	lastName := aLastName.
	identificationType := anIdType.
	identificationNumber := anIdNumber.! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:09:50'!
PASSED!

!methodRemoval: CustomerImporter #newCustomerFrom: stamp: 'JT 6/26/2023 19:10:01'!
newCustomerFrom: customerData

	^ Customer firstName: customerData second
			lastName: customerData third
			identificationType: customerData fourth
			identificationNumber: customerData fifth!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:10:02' prior: 50624924 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := ( Customer firstName: customerData second
			lastName: customerData third
			identificationType: customerData fourth
			identificationNumber: customerData fifth).
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:10:17' prior: 50625104 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer firstName: customerData second
			lastName: customerData third
			identificationType: customerData fourth
			identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:10:22' prior: 50625135 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer
				firstName: customerData second
				lastName: customerData third
				identificationType: customerData fourth
				identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:11:21'!
createCustomerFrom: customerData

	^ Customer
				firstName: customerData second
				lastName: customerData third
				identificationType: customerData fourth
				identificationNumber: customerData fifth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:11:21' prior: 50625166 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:11:29' prior: 50625196!
createCustomerFrom: customerData

	^ Customer
		firstName: customerData second
		lastName: customerData third
		identificationType: customerData fourth
		identificationNumber: customerData fifth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:12:22' prior: 50625206 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new;
			streetName: addressData second;
			streetNumber: addressData third asNumber;
			 town: addressData fourth;
			 zipCode: addressData fifth asNumber;
			 province: addressData sixth.
			newCustomer addAddress: newAddress. ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:13:01'!
createAddressFrom: addressData

	^ Address new;
			streetName: addressData second;
			streetNumber: addressData third asNumber;
			 town: addressData fourth;
			 zipCode: addressData fifth asNumber;
			 province: addressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:13:01' prior: 50625243 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:13:39' prior: 50625268!
createAddressFrom: addressData

	^ Address
		streetName: addressData second
		streetNumber: addressData third asNumber
		town: addressData fourth
		zipCode: addressData fifth asNumber
		province: addressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:13:49' prior: 50625299!
createAddressFrom: anAddressDataArray

	^ Address
		streetName: anAddressDataArray second
		streetNumber: anAddressDataArray third asNumber
		town: anAddressDataArray fourth
		zipCode: anAddressDataArray fifth asNumber
		province: anAddressDataArray sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:13:56' prior: 50625233!
createCustomerFrom: aCustomerDataArray

	^ Customer
		firstName: aCustomerDataArray second
		lastName: aCustomerDataArray third
		identificationType: aCustomerDataArray fourth
		identificationNumber: aCustomerDataArray fifth! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:14:01'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:14:01'!
ERROR!
!Address class methodsFor: 'instance creation' stamp: 'JT 6/26/2023 19:14:06'!
streetName: aString streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeStreetName: aString streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'JT 6/26/2023 19:14:12' prior: 50625335!
streetName: aString streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 
	^self new initializeStreetName: aString streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'JT 6/26/2023 19:14:24' prior: 50625349!
streetName: aStreetName streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 
	^self new initializeStreetName: aStreetName streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'JT 6/26/2023 19:14:29' prior: 50625360!
streetName: aStreetName streetNumber: aStreetNumber town: aString3 zipCode: aSmallInteger4 province: aString5 
	^self new initializeStreetName: aStreetName streetNumber: aStreetNumber town: aString3 zipCode: aSmallInteger4 province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'JT 6/26/2023 19:14:34' prior: 50625371!
streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aSmallInteger4 province: aString5 
	^self new initializeStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aSmallInteger4 province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'JT 6/26/2023 19:14:39' prior: 50625382!
streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aString5 
	^self new initializeStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'JT 6/26/2023 19:14:41' prior: 50625393!
streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince 
	^self new initializeStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince ! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:14:44'!
ERROR!
!Address methodsFor: 'initialization' stamp: 'JT 6/26/2023 19:14:50'!
initializeStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince 
	self shouldBeImplemented.
	streetName := aStreetName.
	streetNumber := aStreetNumber.
	town := aTown.
	zipCode := aZipCode.
	province := aProvince.! !
!Address methodsFor: 'initialization' stamp: 'JT 6/26/2023 19:14:57' prior: 50625416!
initializeStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince
	streetName := aStreetName.
	streetNumber := aStreetNumber.
	town := aTown.
	zipCode := aZipCode.
	province := aProvince.! !

Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'JT 6/26/2023 19:15:16'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:15:29'!
PASSED!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'JT 6/26/2023 19:15:50'!
Object subclass: #Address
	instanceVariableNames: 'streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:16:13'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:16:13'!
PASSED!

Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'JT 6/26/2023 19:16:41'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:16:45'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:19:52'!
parse: aLine beginningWith: aCharacter andThen: aBlockThatUsesParsedLine

	(aLine beginsWith: aCharacter) ifTrue: [ | customerData |
			customerData := aLine findTokens: $, ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:19:59' prior: 50625485!
parse: aLine beginningWith: aCharacter andThen: aBlockThatUsesParsedLine

	(aLine beginsWith: aCharacter) ifTrue: [ | parsedLine |
			parsedLine := aLine findTokens: $, ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:20:16' prior: 50625494!
parse: aLine beginningWith: aCharacter andThen: aBlockThatUsesParsedLine

	(aLine beginsWith: aCharacter) ifTrue: [ | parsedLine |
			parsedLine := aLine findTokens: $,.
			aBlockThatUsesParsedLine value: parsedLine.
	]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:21:34' prior: 50625279 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self parse: line beginningWith: 'C' andThen: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line beginningWith: 'A' andThen: [:addressData | | newAddress |
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:21:49'!
parse: aLine ifBeginsWith: aCharacter then: aBlockThatUsesParsedLine

	(aLine beginsWith: aCharacter) ifTrue: [ | parsedLine |
			parsedLine := aLine findTokens: $,.
			aBlockThatUsesParsedLine value: parsedLine.
	]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:21:49' prior: 50625514 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData | | newAddress |
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].

		line := readStream nextLine. ].

	! !

!methodRemoval: CustomerImporter #parse:beginningWith:andThen: stamp: 'JT 6/26/2023 19:21:49'!
parse: aLine beginningWith: aCharacter andThen: aBlockThatUsesParsedLine

	(aLine beginsWith: aCharacter) ifTrue: [ | parsedLine |
			parsedLine := aLine findTokens: $,.
			aBlockThatUsesParsedLine value: parsedLine.
	]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:21:55' prior: 50625543 overrides: 16902254!
value
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData | | newAddress |
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:21:56' prior: 50625572 overrides: 16902254!
value

	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData | | newAddress |
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:22:04'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:23:33' prior: 50625590 overrides: 16902254!
value

	| newCustomer line |

	self withLinesOf: readStream do: [:_line |
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData | | newAddress |
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:23:40' prior: 50625611 overrides: 16902254!
value

	| newCustomer |

	self withLinesOf: readStream do: [:line |
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData | | newAddress |
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:24:38'!
withLinesOf: aReadStream do: aBlockThatUsesLine

	| line |
	line := aReadStream nextLine.
	
	[ line isNotNil ] whileTrue: [
		aBlockThatUsesLine value: line.
		line := aReadStream nextLine.
	].! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:24:45'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:24:45'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:25:22' prior: 50625643!
withLinesOf: aReadStream do: aBlockThatUsesLine

	| line |
	line := aReadStream nextLine.
	
	[ line notNil ] whileTrue: [
		aBlockThatUsesLine value: line.
		line := aReadStream nextLine.
	].! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:25:26'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:27:28'!
test02
	
	CustomerImporter valueFrom: (ReadStream on: 'C,,,,') into: session.
	! !

!testRun: #ImportTest #test02 stamp: 'JT 6/26/2023 19:27:32'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:28:23' prior: 50625668!
test02
	
	CustomerImporter valueFrom: (ReadStream on: ',,,,') into: session.
	! !

!testRun: #ImportTest #test02 stamp: 'JT 6/26/2023 19:28:24'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:28:24'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'JT 6/26/2023 19:28:25'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:28:34' prior: 50625676!
test02
	
	CustomerImporter valueFrom: (ReadStream on: '
	') into: session.
	! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:28:36' prior: 50625688!
test02
	
	CustomerImporter valueFrom: (ReadStream on: '
') into: session.
	! !

!testRun: #ImportTest #test02 stamp: 'JT 6/26/2023 19:28:37'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:28:37'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'JT 6/26/2023 19:28:38'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:28:46' prior: 50625693!
test02
	
	CustomerImporter valueFrom: (ReadStream on: '') into: session.
	! !

!testRun: #ImportTest #test02 stamp: 'JT 6/26/2023 19:28:48'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:28:48'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'JT 6/26/2023 19:28:48'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'JT 6/26/2023 19:28:52'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:30:27'!
test02AllLinesAreValid
	
	CustomerImporter valueFrom: (ReadStream on: ',,,,

') into: session.
	! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:31:09' prior: 50625719!
test02AllLinesAreValid
	
	self should: [
	CustomerImporter valueFrom: (ReadStream on: ',,,,

') into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamHasInvalidLines.! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:31:15' prior: 50625725!
test02AllLinesAreValid
	
	self should: [
	CustomerImporter valueFrom: (ReadStream on: ',,,,

') into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamHasInvalidLinesErrorDescription.! !

!methodRemoval: ImportTest #test02 stamp: 'JT 6/26/2023 19:31:19'!
test02
	
	CustomerImporter valueFrom: (ReadStream on: '') into: session.
	!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 19:31:21'!
ERROR!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 19:31:21'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'JT 6/26/2023 19:31:31'!
streamHasInvalidLinesErrorDescription
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'JT 6/26/2023 19:31:49' prior: 50625755!
streamHasInvalidLinesErrorDescription
	^ 'Read stream has invalid line'! !

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 19:31:51'!
FAILURE!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 19:31:51'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:32:19' prior: 50625628 overrides: 16902254!
value

	| newCustomer |

	self withLinesOf: readStream do: [:line |
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData | | newAddress |
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].
		
		self error: self class streamHasInvalidLinesErrorDescription.
	].! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:32:24'!
ERROR!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 19:32:24'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:32:24'!
ERROR!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 19:32:33'!
PASSED!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 19:32:34'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:32:45'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:32:45'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:34:05' prior: 50625773 overrides: 16902254!
value

	| newCustomer |

	self withLinesOf: readStream do: [:line |
		self assertIsNotInvalidLine: line.
		
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData | | newAddress |
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:35:51'!
assertIsNotInvalidLine: aLine

	((aLine beginsWith: 'C') not and: [(aLine beginsWith: 'A') not]) ifTrue: [self error: self class streamHasInvalidLinesErrorDescription].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:36:01'!
signalStreamHasInvalidLines

	^ self error: self class streamHasInvalidLinesErrorDescription! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:36:01' prior: 50625826!
assertIsNotInvalidLine: aLine

	((aLine beginsWith: 'C') not and: [(aLine beginsWith: 'A') not]) ifTrue: [self signalStreamHasInvalidLines].! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:36:09'!
PASSED!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 19:36:10'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:38:09'!
test03StreamCannotStartWithAddress
	
	self should: [
	CustomerImporter valueFrom: (ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs') into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamCannotStartWithAddressErrorDescription.! !

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 19:38:12'!
ERROR!

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 19:38:12'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'JT 6/26/2023 19:38:17'!
streamCannotStartWithAddressErrorDescription
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'JT 6/26/2023 19:38:28' prior: 50625870!
streamCannotStartWithAddressErrorDescription
	^ 'Read stream cannot start with address'! !

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 19:38:32'!
ERROR!

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 19:38:32'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:38:39' prior: 50625852!
test03StreamCannotStartWithAddress
	
	self should: [
		CustomerImporter valueFrom: (ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs') into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamCannotStartWithAddressErrorDescription.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:39:41' prior: 50625809 overrides: 16902254!
value

	| newCustomer |

	self withLinesOf: readStream do: [:line |
		self assertIsNotInvalidLine: line.
		
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData | | newAddress |
			newCustomer ifNil: [self error: self class streamCannotStartWithAddressErrorDescription].
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].
	].! !

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 19:39:50'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:40:10' prior: 50625888!
test03StreamCannotStartWithAddress
	
	self should: [
		CustomerImporter valueFrom: (ReadStream on: 'A,San Martin,3322,Olivos,1636') into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamCannotStartWithAddressErrorDescription.! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:40:27'!
test04
	
	self should: [
		CustomerImporter valueFrom: (ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs') into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamCannotStartWithAddressErrorDescription.! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:40:32' prior: 50625935!
test04
	
	self should: [
		CustomerImporter valueFrom: (ReadStream on: 'A,San Martin,3322,Olivos,1636') into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamCannotStartWithAddressErrorDescription.! !

!testRun: #ImportTest #test04 stamp: 'JT 6/26/2023 19:40:35'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:40:47' prior: 50625946!
test04
	
	self should: [
		CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444') into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamCannotStartWithAddressErrorDescription.! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:40:50' prior: 50625959!
test04
	
	self should: [
		CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D') into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamCannotStartWithAddressErrorDescription.! !

!testRun: #ImportTest #test04 stamp: 'JT 6/26/2023 19:40:51'!
FAILURE!

!testRun: #ImportTest #test04 stamp: 'JT 6/26/2023 19:40:51'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:41:04' prior: 50625969!
test04
	
	CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D') into: session.! !

!testRun: #ImportTest #test04 stamp: 'JT 6/26/2023 19:41:05'!
ERROR!

!testRun: #ImportTest #test04 stamp: 'JT 6/26/2023 19:41:05'!
ERROR!

!testRun: #ImportTest #test04 stamp: 'JT 6/26/2023 19:41:19'!
ERROR!

!testRun: #ImportTest #test04 stamp: 'JT 6/26/2023 19:41:19'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:42:24' prior: 50625984!
test04
	
	self should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D') into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter customerLineShouldHave5Items! !

!testRun: #ImportTest #test04 stamp: 'JT 6/26/2023 19:42:27'!
ERROR!

!testRun: #ImportTest #test04 stamp: 'JT 6/26/2023 19:42:27'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'JT 6/26/2023 19:42:31'!
customerLineShouldHave5Items
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'JT 6/26/2023 19:42:39' prior: 50626013!
customerLineShouldHave5Items
	^ 'Customer line should have 5 items'! !

!testRun: #ImportTest #test04 stamp: 'JT 6/26/2023 19:42:40'!
FAILURE!

!testRun: #ImportTest #test04 stamp: 'JT 6/26/2023 19:42:40'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:42:56'!
test04CustomerLineShouldHave5Items
	
	self should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D') into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter customerLineShouldHave5Items! !

!methodRemoval: ImportTest #test04 stamp: 'JT 6/26/2023 19:42:56'!
test04
	
	self should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D') into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter customerLineShouldHave5Items!

!testRun: #ImportTest #test04CustomerLineShouldHave5Items stamp: 'JT 6/26/2023 19:42:58'!
FAILURE!

!testRun: #ImportTest #test04CustomerLineShouldHave5Items stamp: 'JT 6/26/2023 19:42:58'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:43:32' prior: 50625320!
createCustomerFrom: aCustomerDataArray

	self assertCustomerDataHasEnoughElements: aCustomerDataArray.

	^ Customer
		firstName: aCustomerDataArray second
		lastName: aCustomerDataArray third
		identificationType: aCustomerDataArray fourth
		identificationNumber: aCustomerDataArray fifth! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:43:35'!
ERROR!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 19:43:35'!
PASSED!

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 19:43:35'!
PASSED!

!testRun: #ImportTest #test04CustomerLineShouldHave5Items stamp: 'JT 6/26/2023 19:43:35'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:44:23'!
assertCustomerDataHasEnoughElements: aCustomerDataArray

	aCustomerDataArray size = 5 ifFalse: [self error: self class customerLineShouldHave5Items]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:44:58'!
assertCustomerDataHasEnoughElements: aCustomerDataArray has: anExpectedSize 

	aCustomerDataArray size = 5 ifFalse: [self error: self class customerLineShouldHave5Items]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:44:58' prior: 50626054!
createCustomerFrom: aCustomerDataArray

	self assertCustomerDataHasEnoughElements: aCustomerDataArray has: 5.

	^ Customer
		firstName: aCustomerDataArray second
		lastName: aCustomerDataArray third
		identificationType: aCustomerDataArray fourth
		identificationNumber: aCustomerDataArray fifth! !

!methodRemoval: CustomerImporter #assertCustomerDataHasEnoughElements: stamp: 'JT 6/26/2023 19:44:58'!
assertCustomerDataHasEnoughElements: aCustomerDataArray

	aCustomerDataArray size = 5 ifFalse: [self error: self class customerLineShouldHave5Items]!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:44:58' prior: 50626085!
assertCustomerDataHasEnoughElements: aCustomerDataArray has: anExpectedSize 

	aCustomerDataArray size = anExpectedSize ifFalse: [self error: self class customerLineShouldHave5Items]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:45:32' prior: 50626115!
assertCustomerDataHasEnoughElements: aCustomerDataArray has: anExpectedSize 

	aCustomerDataArray size = anExpectedSize ifFalse: [self error: CustomerImporter customerLineShouldHave5Items]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:46:21'!
assertCustomerDataHasEnoughElements: aCustomerDataArray has: anExpectedSize ifNotRaiseErrorWith: anErrorDescription  

	aCustomerDataArray size = anExpectedSize ifFalse: [self error: CustomerImporter customerLineShouldHave5Items]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:46:21' prior: 50626094!
createCustomerFrom: aCustomerDataArray

	self assertCustomerDataHasEnoughElements: aCustomerDataArray has: 5 ifNotRaiseErrorWith: CustomerImporter customerLineShouldHave5Items.

	^ Customer
		firstName: aCustomerDataArray second
		lastName: aCustomerDataArray third
		identificationType: aCustomerDataArray fourth
		identificationNumber: aCustomerDataArray fifth! !

!methodRemoval: CustomerImporter #assertCustomerDataHasEnoughElements:has: stamp: 'JT 6/26/2023 19:46:21'!
assertCustomerDataHasEnoughElements: aCustomerDataArray has: anExpectedSize 

	aCustomerDataArray size = anExpectedSize ifFalse: [self error: CustomerImporter customerLineShouldHave5Items]!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:46:21' prior: 50626133!
assertCustomerDataHasEnoughElements: aCustomerDataArray has: anExpectedSize ifNotRaiseErrorWith: anErrorDescription  

	aCustomerDataArray size = anExpectedSize ifFalse: [self error: anErrorDescription]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:46:33'!
assert: aCustomerDataArray hasSize: anExpectedSize ifNotRaiseErrorWith: anErrorDescription  

	aCustomerDataArray size = anExpectedSize ifFalse: [self error: anErrorDescription]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:46:33' prior: 50626144!
createCustomerFrom: aCustomerDataArray

	self assert: aCustomerDataArray hasSize: 5 ifNotRaiseErrorWith: CustomerImporter customerLineShouldHave5Items.

	^ Customer
		firstName: aCustomerDataArray second
		lastName: aCustomerDataArray third
		identificationType: aCustomerDataArray fourth
		identificationNumber: aCustomerDataArray fifth! !

!methodRemoval: CustomerImporter #assertCustomerDataHasEnoughElements:has:ifNotRaiseErrorWith: stamp: 'JT 6/26/2023 19:46:33'!
assertCustomerDataHasEnoughElements: aCustomerDataArray has: anExpectedSize ifNotRaiseErrorWith: anErrorDescription  

	aCustomerDataArray size = anExpectedSize ifFalse: [self error: anErrorDescription]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:46:48' prior: 50626186!
createCustomerFrom: aCustomerDataArray

	self assert: aCustomerDataArray hasSize: 5 ifNotRaiseErrorWith: self class customerLineShouldHave5Items.

	^ Customer
		firstName: aCustomerDataArray second
		lastName: aCustomerDataArray third
		identificationType: aCustomerDataArray fourth
		identificationNumber: aCustomerDataArray fifth! !

!testRun: #ImportTest #test04CustomerLineShouldHave5Items stamp: 'JT 6/26/2023 19:46:54'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:47:29'!
test05AddressLineShouldHave6Items
	
	self should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636') into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter customerLineShouldHave5Items! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:47:56' prior: 50625309!
createAddressFrom: anAddressDataArray

	self assert: anAddressDataArray hasSize: 6 ifNotRaiseErrorWith: self class addressLineShouldHave6Items.

	^ Address
		streetName: anAddressDataArray second
		streetNumber: anAddressDataArray third asNumber
		town: anAddressDataArray fourth
		zipCode: anAddressDataArray fifth asNumber
		province: anAddressDataArray sixth! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'JT 6/26/2023 19:48:17'!
addressLineShouldHave6Items
	^ 'Address line should have 6 items'! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'JT 6/26/2023 19:48:37'!
addressLineShouldHave6ItemsErrorDescription
	^ 'Address line should have 6 items'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:48:37' prior: 50626238!
createAddressFrom: anAddressDataArray

	self assert: anAddressDataArray hasSize: 6 ifNotRaiseErrorWith: self class addressLineShouldHave6ItemsErrorDescription.

	^ Address
		streetName: anAddressDataArray second
		streetNumber: anAddressDataArray third asNumber
		town: anAddressDataArray fourth
		zipCode: anAddressDataArray fifth asNumber
		province: anAddressDataArray sixth! !

!methodRemoval: CustomerImporter class #addressLineShouldHave6Items stamp: 'JT 6/26/2023 19:48:37'!
addressLineShouldHave6Items
	^ 'Address line should have 6 items'!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'JT 6/26/2023 19:48:45'!
customerLineShouldHave5ItemsErrorDescription
	^ 'Customer line should have 5 items'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:48:45' prior: 50626210!
createCustomerFrom: aCustomerDataArray

	self assert: aCustomerDataArray hasSize: 5 ifNotRaiseErrorWith: self class customerLineShouldHave5ItemsErrorDescription.

	^ Customer
		firstName: aCustomerDataArray second
		lastName: aCustomerDataArray third
		identificationType: aCustomerDataArray fourth
		identificationNumber: aCustomerDataArray fifth! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:48:45' prior: 50626226!
test05AddressLineShouldHave6Items
	
	self should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636') into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter customerLineShouldHave5ItemsErrorDescription! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:48:45' prior: 50626028!
test04CustomerLineShouldHave5Items
	
	self should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D') into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter customerLineShouldHave5ItemsErrorDescription! !

!methodRemoval: CustomerImporter class #customerLineShouldHave5Items stamp: 'JT 6/26/2023 19:48:45'!
customerLineShouldHave5Items
	^ 'Customer line should have 5 items'!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:49:02' prior: 50626304!
test05AddressLineShouldHave6Items
	
	self should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636') into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter addressLineShouldHave6ItemsErrorDescription! !

!testRun: #ImportTest #test05AddressLineShouldHave6Items stamp: 'JT 6/26/2023 19:49:03'!
PASSED!

!testRun: #ImportTest #test04CustomerLineShouldHave5Items stamp: 'JT 6/26/2023 19:49:04'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:50:28'!
signalStreamCannotStartWithAddress

	^ self error: self class streamCannotStartWithAddressErrorDescription! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:50:28' prior: 50625901 overrides: 16902254!
value

	| newCustomer |

	self withLinesOf: readStream do: [:line |
		self assertIsNotInvalidLine: line.
		
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData | | newAddress |
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].
	].! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 19:51:09'!
PASSED!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 19:51:09'!
PASSED!

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 19:51:09'!
PASSED!

!testRun: #ImportTest #test04CustomerLineShouldHave5Items stamp: 'JT 6/26/2023 19:51:09'!
PASSED!

!testRun: #ImportTest #test05AddressLineShouldHave6Items stamp: 'JT 6/26/2023 19:51:09'!
PASSED!

----SNAPSHOT----(26 June 2023 19:52:07) CustomerImporter-it2.image priorSource: 9369961!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:52:44' prior: 50626358 overrides: 16902254!
value

	 

	self withLinesOf: readStream do: [:line |
		self assertIsNotInvalidLine: line.
		
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData | | newAddress |
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].
	].! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'JT 6/26/2023 19:52:44'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 19:52:49' prior: 50626395 overrides: 16902254!
value

	self withLinesOf: readStream do: [:line |
		self assertIsNotInvalidLine: line.
		
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData | | newAddress |
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:52:57' prior: 50626423 overrides: 16902254!
value

	self withLinesOf: readStream do: [:line |
		self assertIsNotInvalidLine: line.
		
		self parse: line ifBeginsWith: 'C' then: [:customerData |
			newCustomer := self createCustomerFrom: customerData.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [:addressData |  
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: addressData.
			newCustomer addAddress: newAddress. ].
	].! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'JT 6/26/2023 19:52:57'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

----SNAPSHOT----(26 June 2023 19:53:14) CustomerImporter-it2.image priorSource: 9431685!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:54:15'!
dataWithInvalidLines

	^ ReadStream on: ',,,,

'! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:54:15' prior: 50625735!
test02AllLinesAreValid
	
	self should: [
	CustomerImporter valueFrom: (self dataWithInvalidLines) into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamHasInvalidLinesErrorDescription.! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:54:21' prior: 50626476!
test02AllLinesAreValid
	
	self should: [
	CustomerImporter valueFrom: self dataWithInvalidLines into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamHasInvalidLinesErrorDescription.! !
!ImportTest methodsFor: 'test data' stamp: 'JT 6/26/2023 19:54:35'!
importDataWithInvalidLines

	^ ReadStream on: ',,,,

'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:54:35' prior: 50626486!
test02AllLinesAreValid
	
	self should: [
	CustomerImporter valueFrom: self importDataWithInvalidLines into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamHasInvalidLinesErrorDescription.! !

!methodRemoval: ImportTest #dataWithInvalidLines stamp: 'JT 6/26/2023 19:54:35'!
dataWithInvalidLines

	^ ReadStream on: ',,,,

'!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:54:50' prior: 50626501!
test02AllLinesAreValid
	
	self should: [ CustomerImporter valueFrom: self importDataWithInvalidLines into: session. ] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamHasInvalidLinesErrorDescription.! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:54:56' prior: 50626515!
test02AllLinesAreValid
	
	self should: [ CustomerImporter valueFrom: self importDataWithInvalidLines into: session. ]
		 raise: Error - MessageNotUnderstood
		 withMessageText: CustomerImporter streamHasInvalidLinesErrorDescription.! !

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 19:54:57'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:55:13'!
importDataStartingWithAddress

	^ ReadStream on: 'A,San Martin,3322,Olivos,1636'! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:55:13' prior: 50625924!
test03StreamCannotStartWithAddress
	
	self should: [
		CustomerImporter valueFrom: (self importDataStartingWithAddress) into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamCannotStartWithAddressErrorDescription.! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:55:21' prior: 50626544!
test03StreamCannotStartWithAddress
	
	self should: [
		CustomerImporter valueFrom: self importDataStartingWithAddress into: session.
	] raise: Error - MessageNotUnderstood
	withMessageText: CustomerImporter streamCannotStartWithAddressErrorDescription.! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:55:31' prior: 50626555!
test03StreamCannotStartWithAddress
	
	self should: [ CustomerImporter valueFrom: self importDataStartingWithAddress into: session. ]
		 raise: Error - MessageNotUnderstood
		 withMessageText: CustomerImporter streamCannotStartWithAddressErrorDescription.! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:55:59'!
importDataWithCustomerLineWith4Items

	^ ReadStream on: 'C,Pepe,Sanchez,D'! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:55:59' prior: 50626317!
test04CustomerLineShouldHave5Items
	
	self should: [CustomerImporter valueFrom: (self importDataWithCustomerLineWith4Items) into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter customerLineShouldHave5ItemsErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:56:02' prior: 50626582!
test04CustomerLineShouldHave5Items
	
	self should: [CustomerImporter valueFrom: self importDataWithCustomerLineWith4Items into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter customerLineShouldHave5ItemsErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:57:00'!
importDataWithAddressWith5Items

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'! !
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:57:01' prior: 50626333!
test05AddressLineShouldHave6Items
	
	self should: [CustomerImporter valueFrom: (self importDataWithAddressWith5Items) into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter addressLineShouldHave6ItemsErrorDescription! !
!ImportTest methodsFor: 'test data' stamp: 'JT 6/26/2023 19:57:13'!
importDataWithAddressLineWith5Items

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 19:57:13' prior: 50626610!
test05AddressLineShouldHave6Items
	
	self should: [CustomerImporter valueFrom: (self importDataWithAddressLineWith5Items) into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter addressLineShouldHave6ItemsErrorDescription! !

!methodRemoval: ImportTest #importDataWithAddressWith5Items stamp: 'JT 6/26/2023 19:57:13'!
importDataWithAddressWith5Items

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 19:58:30' prior: 50626628!
test05AddressLineShouldHave6Items
	
	self should: [CustomerImporter valueFrom: self importDataWithAddressLineWith5Items into: session]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: CustomerImporter addressLineShouldHave6ItemsErrorDescription! !
!CustomerImporter methodsFor: 'parsing' stamp: 'JT 6/26/2023 19:59:43' prior: 50625532!
parse: aLine ifBeginsWith: aCharacter then: aBlockToRun

	(aLine beginsWith: aCharacter) ifTrue: [ | parsedLine |
			parsedLine := aLine findTokens: $,.
			aBlockToRun value: parsedLine.
	]! !
!CustomerImporter methodsFor: 'parsing' stamp: 'JT 6/26/2023 19:59:59' prior: 50626656!
parse: aLine ifBeginsWith: aCharacter then: aBlockToRun

	(aLine beginsWith: aCharacter) ifTrue: [ 
			aBlockToRun value.
	]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:00:23' prior: 50626442 overrides: 16902254!
value

	self withLinesOf: readStream do: [:line | | aLine data |
		self assertIsNotInvalidLine: line.
		data := aLine findTokens: $,.
		
		self parse: line ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 20:01:00'!
ERROR!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 20:01:00'!
PASSED!

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 20:01:00'!
ERROR!

!testRun: #ImportTest #test04CustomerLineShouldHave5Items stamp: 'JT 6/26/2023 20:01:00'!
ERROR!

!testRun: #ImportTest #test05AddressLineShouldHave6Items stamp: 'JT 6/26/2023 20:01:00'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:01:13' prior: 50626673 overrides: 16902254!
value

	self withLinesOf: readStream do: [:line | | data |
		self assertIsNotInvalidLine: line.
		data := line findTokens: $,.
		
		self parse: line ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 20:01:20'!
PASSED!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 20:01:20'!
PASSED!

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 20:01:20'!
PASSED!

!testRun: #ImportTest #test04CustomerLineShouldHave5Items stamp: 'JT 6/26/2023 20:01:20'!
PASSED!

!testRun: #ImportTest #test05AddressLineShouldHave6Items stamp: 'JT 6/26/2023 20:01:20'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:01:28' prior: 50626706 overrides: 16902254!
value

	self withLinesOf: readStream do: [:line | | data |
		
		self parse: line ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:01:31' prior: 50626739 overrides: 16902254!
value

	self withLinesOf: readStream do: [:line | | data |
		self parse: line ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'parsing' stamp: 'JT 6/26/2023 20:01:42'!
withParsedDataOf: aReadStream do: aBlockThatUsesLine

	| line |
	line := aReadStream nextLine.
	
	[ line notNil ] whileTrue: [
		aBlockThatUsesLine value: line.
		line := aReadStream nextLine.
	].! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JT 6/26/2023 20:01:42' prior: 50626755 overrides: 16902254!
value

	self withParsedDataOf: readStream do: [:line | | data |
		self parse: line ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !

!methodRemoval: CustomerImporter #withLinesOf:do: stamp: 'JT 6/26/2023 20:01:42'!
withLinesOf: aReadStream do: aBlockThatUsesLine

	| line |
	line := aReadStream nextLine.
	
	[ line notNil ] whileTrue: [
		aBlockThatUsesLine value: line.
		line := aReadStream nextLine.
	].!
!CustomerImporter methodsFor: 'parsing' stamp: 'JT 6/26/2023 20:01:58' prior: 50626770!
withParsedDataOf: aReadStream do: aBlockThatUsesLine

	| line |
	line := aReadStream nextLine.
	
	[ line notNil ] whileTrue: [ | data |
		self assertIsNotInvalidLine: line.
		data := line findTokens: $,.
		aBlockThatUsesLine value: data.
		line := aReadStream nextLine.
	].! !
!CustomerImporter methodsFor: 'parsing' stamp: 'JT 6/26/2023 20:02:01' prior: 50626804!
withParsedDataOf: aReadStream do: aBlockThatUsesLine

	| line |
	line := aReadStream nextLine.
	
	[ line notNil ] whileTrue: [ self assertIsNotInvalidLine: line.
		aBlockThatUsesLine value: line findTokens: $,.
		line := aReadStream nextLine.
	].! !
!CustomerImporter methodsFor: 'parsing' stamp: 'JT 6/26/2023 20:02:12' prior: 50626816!
withParsedDataOf: aReadStream do: aBlockThatUsesLine

	| line |
	line := aReadStream nextLine.
	
	[ line notNil ] whileTrue: [
		self assertIsNotInvalidLine: line.
		aBlockThatUsesLine value: (line findTokens: $,).
		line := aReadStream nextLine.
	].! !
!CustomerImporter methodsFor: 'parsing' stamp: 'JT 6/26/2023 20:02:25' prior: 50626827!
withParsedDataOf: aReadStream do: aBlockThatUsesParsedData

	| line |
	line := aReadStream nextLine.
	
	[ line notNil ] whileTrue: [
		self assertIsNotInvalidLine: line.
		aBlockThatUsesParsedData value: (line findTokens: $,).
		line := aReadStream nextLine.
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:02:34' prior: 50626780 overrides: 16902254!
value

	self withParsedDataOf: readStream do: [:data | | line |
		self parse: line ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:02:40' prior: 50626850 overrides: 16902254!
value

	self withParsedDataOf: readStream do: [:_data | | data line |
		self parse: line ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:02:49' prior: 50626867 overrides: 16902254!
value

	self withParsedDataOf: readStream do: [:data |
		self parse: true ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: true ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:03:02' prior: 50626884 overrides: 16902254!
value

	self withParsedDataOf: readStream do: [:parsedData |
		self parse: true ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: parsedData.
			session persist: newCustomer
		].
	
		self parse: true ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: parsedData.
			newCustomer addAddress: newAddress. ].
	].! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 20:03:05'!
ERROR!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 20:03:05'!
PASSED!

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 20:03:06'!
ERROR!

!testRun: #ImportTest #test04CustomerLineShouldHave5Items stamp: 'JT 6/26/2023 20:03:06'!
ERROR!

!testRun: #ImportTest #test05AddressLineShouldHave6Items stamp: 'JT 6/26/2023 20:03:06'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 20:03:43'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 20:03:43'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:01:31' prior: 50626900 overrides: 16902254!
value

	self withLinesOf: readStream do: [:line | | data |
		self parse: line ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'parsing' stamp: 'JT 6/26/2023 20:04:26'!
withLinesOf: aReadStream do: aBlockThatUsesParsedData

	| line |
	line := aReadStream nextLine.
	
	[ line notNil ] whileTrue: [
		self assertIsNotInvalidLine: line.
		aBlockThatUsesParsedData value: (line findTokens: $,).
		line := aReadStream nextLine.
	].! !

!methodRemoval: CustomerImporter #withParsedDataOf:do: stamp: 'JT 6/26/2023 20:04:26'!
withParsedDataOf: aReadStream do: aBlockThatUsesParsedData

	| line |
	line := aReadStream nextLine.
	
	[ line notNil ] whileTrue: [
		self assertIsNotInvalidLine: line.
		aBlockThatUsesParsedData value: (line findTokens: $,).
		line := aReadStream nextLine.
	].!
!CustomerImporter methodsFor: 'parsing' stamp: 'JT 6/26/2023 20:04:36' prior: 50626951!
withLinesOf: aReadStream do: aBlockThatUsesParsedData

	| line |
	line := aReadStream nextLine.
	
	[ line notNil ] whileTrue: [
		self assertIsNotInvalidLine: line.
		aBlockThatUsesParsedData value: line.
		line := aReadStream nextLine.
	].! !
!CustomerImporter methodsFor: 'parsing' stamp: 'JT 6/26/2023 20:04:42' prior: 50626973!
withLinesOf: aReadStream do: aBlockThatUsesLine

	| line |
	line := aReadStream nextLine.
	
	[ line notNil ] whileTrue: [
		self assertIsNotInvalidLine: line.
		aBlockThatUsesLine value: line.
		line := aReadStream nextLine.
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:04:57' prior: 50626936 overrides: 16902254!
value

	self withLinesOf: readStream do: [:line | | data |
		data := line findTokens: $,.
		self parse: line ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:04:59' prior: 50626995 overrides: 16902254!
value

	self withLinesOf: readStream do: [:line | | data |
		data := line findTokens: $,.
		
		self parse: line ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [
			newCustomer ifNil: [self signalStreamCannotStartWithAddress].
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 20:05:05'!
PASSED!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 20:05:06'!
PASSED!

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 20:05:06'!
PASSED!

!testRun: #ImportTest #test04CustomerLineShouldHave5Items stamp: 'JT 6/26/2023 20:05:06'!
PASSED!

!testRun: #ImportTest #test05AddressLineShouldHave6Items stamp: 'JT 6/26/2023 20:05:06'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:06:02'!
assertStreamDoesntStartWithAddress

	^ newCustomer ifNil: [self signalStreamCannotStartWithAddress]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:06:02' prior: 50627012 overrides: 16902254!
value

	self withLinesOf: readStream do: [:line | | data |
		data := line findTokens: $,.
		
		self parse: line ifBeginsWith: 'C' then: [
			newCustomer := self createCustomerFrom: data.
			session persist: newCustomer
		].
	
		self parse: line ifBeginsWith: 'A' then: [
			self assertStreamDoesntStartWithAddress.
			newAddress := self createAddressFrom: data.
			newCustomer addAddress: newAddress. ].
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JT 6/26/2023 20:06:08' prior: 50627043!
assertStreamDoesntStartWithAddress

	newCustomer ifNil: [self signalStreamCannotStartWithAddress]! !

!testRun: #ImportTest #test01Import stamp: 'JT 6/26/2023 20:06:27'!
PASSED!

!testRun: #ImportTest #test02AllLinesAreValid stamp: 'JT 6/26/2023 20:06:27'!
PASSED!

!testRun: #ImportTest #test03StreamCannotStartWithAddress stamp: 'JT 6/26/2023 20:06:27'!
PASSED!

!testRun: #ImportTest #test04CustomerLineShouldHave5Items stamp: 'JT 6/26/2023 20:06:27'!
PASSED!

!testRun: #ImportTest #test05AddressLineShouldHave6Items stamp: 'JT 6/26/2023 20:06:27'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JT 6/26/2023 20:09:51'!
test06
	
	CustomerImporter valueFrom: (ReadStream on: 'C,,Pepe,Sanchez,D') into: session! !

!testRun: #ImportTest #test06 stamp: 'JT 6/26/2023 20:09:53'!
ERROR!

!testRun: #ImportTest #test06 stamp: 'JT 6/26/2023 20:09:53'!
ERROR!

----SNAPSHOT----(26 June 2023 20:15:08) CustomerImporter-it2.image priorSource: 9434160!

----SNAPSHOT----(26 June 2023 20:29:55) CustomerImporter-it2.image priorSource: 9454247!